package pl.nn.bankaccount.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.ThrowableAssert.catchThrowable;

import java.math.BigDecimal;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import pl.nn.bankaccount.common.validation.dto.ValidationException;
import pl.nn.bankaccount.common.valueobjects.Balance;
import pl.nn.bankaccount.domain.dto.OpenAccountDto;

class BankAccountOpenTest {

    @Test
    void shouldSuccessfullyOpenAccount() {
        // given
        var openAccountRequest = givenOpenAccountRequest();

        // when
        var bankAccount = BankAccount.open(openAccountRequest);

        // then
        assertThat(bankAccount).isNotNull();
        assertThat(bankAccount.getPlnBalance()).isEqualTo(expectedBalance(openAccountRequest));
        assertThat(bankAccount.getFirstName()).isEqualTo(openAccountRequest.firstName());
        assertThat(bankAccount.getLastName()).isEqualTo(openAccountRequest.lastName());
        assertThat(bankAccount.getForeignBalances()).isEmpty();
    }


    @MethodSource("invalidOpenAccountDtos")
    @ParameterizedTest(name = "Should not be able to open account when: {0}")
    void shouldNotBeAbleToOpenAccountWhenInvalidDto(String caseDescription, OpenAccountDto openAccountRequest) {
        // when
        var throwable = catchThrowable(() -> BankAccount.open(openAccountRequest));

        // then
        assertThat(throwable).isInstanceOf(ValidationException.class);
    }

    private static Stream<Arguments> invalidOpenAccountDtos() {
        return Stream.of(
                Arguments.of("first name null", new OpenAccountDto(null, "Doe", BigDecimal.valueOf(1000))),
                Arguments.of("first name blank", new OpenAccountDto("", "Doe", BigDecimal.valueOf(1000))),
                Arguments.of("last name null", new OpenAccountDto("John", null, BigDecimal.valueOf(1000))),
                Arguments.of("last name blank", new OpenAccountDto("John", "", BigDecimal.valueOf(1000))),
                Arguments.of("initial balance null", new OpenAccountDto("John", "Doe", null)),
                Arguments.of("initial balance negative", new OpenAccountDto("John", "Doe", BigDecimal.valueOf(-1000)))
        );
    }

    private static Balance expectedBalance(final OpenAccountDto openAccountRequest) {
        return Balance.create(openAccountRequest.initialBalanceInPln(), Currency.PLN);
    }

    private static OpenAccountDto givenOpenAccountRequest() {
        return new OpenAccountDto("John", "Doe", BigDecimal.valueOf(1000));
    }
}
